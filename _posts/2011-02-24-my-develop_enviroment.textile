---                                                                                                                                                          
layout: post
title: 虚拟化开发环境
category: linux
published: false
---
"ShopQi":https://github.com/saberma/shopqi 中应用到的技术越来越多，开发环境的搭建变得越来越繁琐，这对开源项目的团队协作是相当不利的
试想，每个程序员的偏好都不同，所使用的操作系统，编辑器都是五花八门的，在开发过程中由于开发环境不一致出现问题的不在少数，调试难度也大

所以，很多公司要求所有的开发机器不能随意安装软件，要保持开发环境高度一致
这种强制限制虽然让人感到不自由，但在公司做软件，也算情有可原

而做开源项目就不同了，我们要尽可能提供便利，减少安装过程对原有环境的影响
要实现这一目标是非常困难的，还好，现在有了Vagrant

h2. Vagrant

!/images/article/develop/vagrant.png!

Vargant是构建虚拟化开发环境的工具，它是用ruby开发的，并以gem方面发布，它会帮我们

# 创建一个Ubuntu10.04版本的32位VirtualBox虚拟机，并应用chef安装项目所需的ruby、数据库、应用服务器程序等
# 将宿主机项目所在的目录与虚拟机共享，我们在宿主机用喜欢的编辑器修改程序，虚拟机中的开发环境可以立即读取到

这样就可以保证项目组成员的开发环境是一致的

h3. 下载

虚拟机的操作系统镜像文件是经过定制的，在vargant中引入的镜像文件称为"Box"
我们先下载这个镜像文件，地址如下

bq. 
"http://files.vagrantup.com/lucid32.box":http://files.vagrantup.com/lucid32.box
假设下载后放至~/lucid32.box

同时需要下载VirtualBox程序，并安装

bq. 
"http://www.virtualbox.org/wiki/Downloads":http://www.virtualbox.org/wiki/Downloads

h3. 安装

安装前请确保宿主机已经安装了ruby1.8和rubygem
可参考"我的Ubuntu":/linux/2011-02-24-my-ubuntu.html

pre. 
gem install vagrant --no-ri --no-rdoc

h3. 创建虚拟机

先引入刚才下载的镜像文件，作为vagant管理下的一个box，以后每次要生成一个用于开发的虚拟机，都会从这个box中复制出来

pre. 
vagrant box add lucid32 ~/lucid32.box
#进入项目目录
cd ~/Documents/shopqi
#初始化，生成配置文件Vagrantfile
vagrant init lucid32
#生成项目虚拟机
vagrant up

等一会儿，一个ubuntu的虚拟机就建好了

h3. 在虚拟机上安装开发环境

vagrant可以根据chef指定的cookbook recipe进行安装，关于chef的介绍可以参考 "应用chef构建服务器集群自动化部署与管理":/linux/2011/01/27/chef-for-automate-deploy.html
这里采用的是不依赖chef服务器的chef-solo方式，recipe采用"ShopQi":https://github.com/saberma/shopqi 服务器部署的cookbook
指定recipe，需要修改Vagrantfile，增加以下内容

bq. 
config.vm.provision :chef_solo do |chef|
　chef.recipe_url = "https://github.com/downloads/saberma/chef-repo/chef-solo.tar.gz"
　chef.add_recipe "develop"
end

chef-solo.tar.gz文件是包含cookbooks集合的压缩包

pre. 
#进入cookbooks所在目录后运行命令
tar zcvf chef-solo.tar.gz ./cookbooks

develop cookbook会引入开发机所需要的依赖recipe，"查看内容":https://github.com/saberma/chef-repo/blob/master/cookbooks/develop/recipes/default.rb

h3. 启动虚拟机

pre. 
vagrant up
#如果已经启动，只想更新或者调试recipe，运行vagrant provision

h3. ssh登录虚拟机

pre. 
vagrant ssh
#查看项目目录，会发现与宿主机的当前目录内容一致
ls /vagrant

h3. 打包发布

现在开发环境已经安装好了，整个过程非常高效。更进一步，我们可以把已经做好的环境打包成镜像文件，分发给其他人，他们就可以瞬间建好开发环境了。

h2. 报错

h3. 找不到client.pem

bq. 
[default] I cannot read /etc/chef/client.pem, which you told me to use to sign requests!: stderr
[default]  (: stderr
[default] Chef::Exceptions::PrivateKeyMissing: stderr

这也太奇怪了，用的是chef-solo方式，而非chef-server，怎么也需要client.pem?
原来是部分cookbook使用了search方法，此方法用于从chef-server中查找相应的信息

解决方法是在cookbook中加入判断条件，开发环境部署时不调用search，生产环境才调用

bq. 
node[:instance_role]

h3. 'unknown': unknown terminal type.

很不幸，这是vagrant的一个bug，详情参考"commit#77a1b9a6efe4f5cdc993":'unknown': https://github.com/mitchellh/vagrant/commit/77a1b9a6efe4f5cdc99343e844835fc790a64c28
解决方法，更新vagrant至0.7.3，不过，这个版本还没有发布，只能先手动修改本地gem的代码了

h2. 参考资源

"Vagrant官网":http://vagrantup.com/
"chef_solo配置":http://vagrantup.com/docs/provisioners/chef_solo.html
"client.pem error":http://tickets.opscode.com/browse/CHEF-1115
